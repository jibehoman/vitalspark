package aop;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URL;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.methods.HeadMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.RequestEntity;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.jcp.xml.dsig.internal.dom.DOMXSLTTransform;

import com.sonicsw.mf.common.metrics.IMetric;
import com.sonicsw.mf.common.runtime.ICanonicalName;
import com.sonicsw.mf.common.runtime.INotification;
import com.sonicsw.mf.common.runtime.impl.CanonicalName;

import stats.Stats;

public class StorageInterceptor {

	public static void beforeopen() {
	}

	public static void beforeclose() {
	}

	public static void beforestoreNotification(INotification notification) {
	}

	public static long stored = 0;

	public static void beforestoreMetrics(IMetric[] ids, String source) {
		stored += ids.length;
	}

	public static synchronized void wrapstoreMetrics(IMetric[] ids,
			String source) {
		if (Stats.streamAnalyticsStorageDirectly()) {
			elasticSearchFeed(ids, source);
		}
		long time = System.currentTimeMillis();
		for (int i = 0; i < ids.length; i++)
			Stats.onMetricReceived(time - ids[i].getCurrencyTimestamp());
	}

	private static HttpClient s_httpclient = new HttpClient();

	public static synchronized void elasticSearchFeed(IMetric[] ids,
			String source) {
		if (ids == null || ids.length == 0) {
			return;
		}
		if (s_httpclient == null) {
			s_httpclient = new HttpClient();
		}

		HeadMethod headMethod = new HeadMethod(
				"http://peaston-ba-mgmt-perf-lab-dmbackup.aurea.local:9200/" + elasticIndex(source));
		try {
			int result = s_httpclient.executeMethod(headMethod);
			if (result == 404) {
				PostMethod postMethod = new PostMethod(
						"http://peaston-ba-mgmt-perf-lab-dmbackup.aurea.local:9200/"
								+ elasticIndex(source));
				String pM = "{\"mappings\":{\"metric\":{\"properties\":{\"timestamp\":{\"type\":\"date\"},\"value\":{\"type\":\"long\"}}}}}";
				RequestEntity entity = new StringRequestEntity(pM, "text/json",
						"ISO-8859-1");
				postMethod.setRequestEntity(entity);
				result = s_httpclient.executeMethod(postMethod);
				if (result < 200 || result >= 300) {
					System.out.println("Result from Elastic createIndex:" + result + " "
							+ postMethod.getResponseBodyAsString());
					return;
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
		
		String bulkMessage = null;
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < ids.length; i++) {
			sb.append("{\"create\":{\"_index\":\"" + elasticIndex(source)
					+ "\",\"_type\":\"metric\"}}\n"); // _id autogenerated
			sb.append("{\"id\":\""
					+ ids[i].getMetricIdentity().getAbsoluteName() + "\",");
			sb.append("\"timestamp\":" + ids[i].getCurrencyTimestamp() + ",");
			sb.append("\"value\":" + ids[i].getValue() + "}\n");
		}
		bulkMessage = sb.toString();
		PostMethod postMethod = new PostMethod(
				"http://peaston-ba-mgmt-perf-lab-dmbackup.aurea.local:9200/_bulk");
		RequestEntity entity;
		try {
			entity = new StringRequestEntity(bulkMessage, "text/json",
					"ISO-8859-1");
			postMethod.setRequestEntity(entity);
			int result = s_httpclient.executeMethod(postMethod);
			if (result < 200 || result >= 300) {
				System.out.println("Result from Elastic:" + result + " "
						+ postMethod.getResponseBodyAsString());
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static String elasticIndex(String source) {
		ICanonicalName sourceCanonicalName = new CanonicalName(source);
		String domain = sourceCanonicalName.getDomainName();
		String container = sourceCanonicalName.getContainerName();
		String component = sourceCanonicalName.getComponentName();
		StringBuffer sb = new StringBuffer();
		sb.append("metrics-" + domain + "-" + container); // index
		if (component != null) {
			sb.append("-" + component); // type(document type)
		}
		return sb.toString().toLowerCase(); // elastic likes LC only
	}
}
