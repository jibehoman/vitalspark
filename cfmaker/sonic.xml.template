
{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description": "Create a Sonic Domain Manager and Host Manager(s) machine setup ready for SDM Model application.",
   "Parameters": {
        "AWSAccessKey": {
            "Description": "Name of AWS Access Key",
            "Type": "String",
            "Default": "AKIAIDC2ASIVA7AY4ZOA"
        },
        "AWSSecretKey": {
            "Description": "Name of AWS Secret Key",
            "Type": "String",
            "Default": "bUfEsFmx4vrb4iGvHAvGq5XJ9/2Vm6Wmn2w76+ur"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String",
            "Default": "AureaSonic"
        },
        "ModelName": {
            "Description": "Name of an SDM Model Zip",
            "Type":  "String",
            "Default": "BA"
        },

        "MachineInstance1IP": {
"Description": "MachineInstance1IP",
    "Type": "String",
    "Default": "unassigned"
},

        "MachineInstance2IP": {
"Description": "MachineInstance2IP",
    "Type": "String",
    "Default": "unassigned"
},

        "Owner": {
            "Description": "Owner of the stack resources, should be email id in Sonic.com domain",
            "Type": "String",
            "Default": "peaston@aurea.com"
        },
        "EnvironmentType": {
            "Description": "Environment for which this stack is created",
            "Type": "String",
            "AllowedValues": [
                "Dev",
                "QA",
                "Prod",
                "Other"
            ],
            "Default": "Dev"
        },
        "ProductName": {
            "Description": "Product for which this stack is used",
            "Type": "String",
            "Default": "Sonic"
        },
        "ServiceLine": {
            "Description": "Service line",
            "Type": "String",
            "Default": "Sonic"
        }

  },



  "Resources" : {

    "SonicInstance1": {
      "Type": "AWS::EC2::Instance",

      "Metadata" : {

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "initial" : [ "config1" ],
            "secondary" : [ "config2" ]
          },
          "config1" : {
            "packages" : {
             "rpm" : {
              "vnc-server-4.1.2-14.el5_6.6.i386" : "ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/58/i386/SL/vnc-server-4.1.2-14.el5_6.6.i386.rpm"
              },
              "yum" : {
                "tcpdump"        : [],
                "strace"        : [],
                "java-1.7.0-openjdk"        : [],
                "xterm"        : []
              }
             },

            "sources" : {

              "/aurea/software/sonic/AUREA_SONIC_2013_UNIX" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/install.zip",
              "/aurea/software/launcher" : "https://s3.amazonaws.com/sonic-aurea/releases/ESD/ESD_2013/LAUNCHER/AUREA_SONIC_LAUNCHER_2013_UNIX.tar.gz",

              "/aurea/software/models" : "https://s3.amazonaws.com/aurea-test-peaston/sdmmodels/MusePhase1-RHEVSonicTests.zip",
              "/aurea/software" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/projects.tar"
            },
            "files" : {
               "/home/ec2-user/prep/installDMManager.sh" : {
                "content" : { "Fn::Join" : ["", [

"chmod a+x /aurea/software/sonic/AUREA_SONIC_2013_UNIX/install.bin", "\n",
"/aurea/software/sonic/AUREA_SONIC_2013_UNIX/install.bin -i silent", 
" -f \"/home/ec2-user/prep/DMManager.base.properties\"", "\n",

"/opt/aurea/sonic2013/Containers/Domain1.DomainManager/launchcontainer_batch.sh Domain1.DomainManager.log", "\n",
"exit", "\n"

                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/DMManager.base.properties" : {
                "content" : { "Fn::Join" : ["", [
"INSTALL_TYPE=new", "\n",
"INSTALLER_UI=silent", "\n",
"INSTALL_LOCATION=/opt/aurea/sonic2013", "\n",
"\n",
"USER_CHOSEN_INSTALL_SET=development", "\n",
"\n",
"ACCEPT_LICENSE_AGREEMENT=true", "\n",
"DEV_KEY=jmv88kqjmbc8e43", "\n",
"SDM_KEY=mrwgkqjmbc8e43", "\n",
"\n",
"CONFIGURE_DOMAIN=true", "\n",
"#MGMT_CONNECTION_URLS=tcp://dmmanager:2506", "\n",
"CONNECTION_URLS=tcp://dmmanager:2506", "\n",
"MGMT_BROKER_PORT=2506", "\n",
"ENABLE_SECURITY=true", "\n",
"SECURITY_USER_NAME=Administrator", "\n",
"SECURITY_PASSWORD=Administrator", "\n",
"CHOSEN_JVM_HOME=/usr/lib/jvm/jre-1.7.0-openjdk", "\n",
"CHOSEN_ECLIPSE_HOME=/opt/aurea/sonic2013/Workbench8.6/eclipse", "\n"

                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/installHostManager.sh" : {
                "content" : { "Fn::Join" : ["", [
"#!/bin/sh -xv", "\n",
"SATELLITE=satellite0", "\n",
"DOMAIN=ProductionDomain", "\n",
"URL=dmmanager:4500", "\n",
"USER=Administrator", "\n",
"PASSWORD=Administrator", "\n",
"\n",
"if [ -d /opt/aurea/soniclauncher2013 ] ; then", "\n",
"echo \"Deleting existing host manager\"", "\n",
"ps -ef | grep soniclauncher2013 | cut -c10-14 | tr '\r' \" \"  | tr '\n' \" \" | awk '{ print \"kill -9 \" $0 }' | bash", "\n",
"rm -rf /opt/aurea/soniclauncher2013", "\n",
"fi", "\n",
"\n",
"\n",
"HOSTNAME=`hostname`", "\n",
"CNAME=ctHm_\"$SATELLITE\"", "\n",
"CPATH=\"$DOMAIN\".\"$CNAME\"", "\n",
"echo \"Setting up Sonic container with host manager for hostname '$HOSTNAME'\"", "\n",
"sed \"/DOMAIN_NAME/d\" /home/ec2-user/prep/HostManager.base.properties > .t", "\n",
"echo \"DOMAIN_NAME=\"$DOMAIN >> .t", "\n",
"cp .t /home/ec2-user/prep/HostManager.base.properties", "\n",
"\n",

"/aurea/software/launcher/AUREA_SONIC_LAUNCHER_2013_UNIX/install_container_launcher.bin -i silent ",

"-D\\$DOMAIN_NAME\\$=$DOMAIN -D\\$CONNECTION_URLS\\$=$URL  -D\\$SECURITY_USER\\$=$USER ",
"-D\\$SECURITY_PASSWORD\\$=$PASSWORD -D\\$CONTAINER_NAME\\$=$CNAME ",
"-D\\$CONTAINER_PATH\\$=\"/Containers/$CNAME\" ",
"-f \"/home/ec2-user/prep/HostManager.base.properties\"", "\n",
"/opt/aurea/soniclauncher2013/Containers/\"$CPATH\"/launchcontainer_batch.sh $CPATH.log", "\n",
"exit", "\n"

                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/HostManager.base.properties" : {
                "content" : { "Fn::Join" : ["", [
"INSTALL_TYPE=new", "\n",
"INSTALL_LOCATION=/opt/aurea/soniclauncher2013", "\n",
"#Configure Container", "\n",
"#-------------------", "\n",
"CONFIGURE_CONTAINER=true", "\n",
"#Domain Manager Connection Properties", "\n",
"#------------------------------------", "\n",
"CONNECTION_URLS=tcp://localhost:2506", "\n",
"SECURITY_USER=Administrator", "\n",
"SECURITY_PASSWORD=Administrator", "\n",
"#The name of the container to configure", "\n",
"#--------------------------------------", "\n",
"CONTAINER_NAME=scripted", "\n",
"#The path for the configured container", "\n",
"#-------------------------------------", "\n",
"CONTAINER_PATH=/scripted/scripted", "\n",
"#Determine if the container configuration should be created if it does not", "\n",
"#exist", "\n",
"#------------------------------------------------------------------------", "\n",
"#-----", "\n",
"CREATE_CONTAINER_CONFIG=true", "\n",
"#The path for the host manager", "\n",
"#-----------------------------", "\n",
"HOST_MANAGER_PATH=/Framework Components/HOST MANAGER", "\n",
"#Should the host manager be configured?", "\n",
"#-------------------------------", "\n",
"HOST_MANAGER_ENABLED=true", "\n",
"#Chosen JVM Home directory", "\n",
"#-------------------------", "\n",
"CHOSEN_JVM_HOME=/usr/lib/jvm/jre-1.7.0-openjdk", "\n",
"#Launch Container Process", "\n",
"#------------------------", "\n",
"LAUNCH_CONTAINER=true", "\n",
"#------------------------", "\n",
"ACCEPT_LICENSE_AGREEMENT=true", "\n",
"\n",
"DOMAIN_NAME=Domain1", "\n"

                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/deployModel.sh" : {
                "content" : { "Fn::Join" : ["", [
"if [ -z $1 ] ; then", "\n",
"        echo  \"Usage: deployModel directory [environment]\"", "\n",
"        return 0", "\n",
"fi;", "\n",
"MODEL=$1", "\n",
"MNV=$2", "\n",
"if [ -z $2 ] ; then", "\n",
"        MNV=production", "\n",
"fi;", "\n",
"sudo /usr/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --configsets secondary --resource SonicInstance1 --region ", { "Ref" : "AWS::Region" }, "\n",
"/home/ec2-user/prep/fixHosts.sh", "\n",
"/home/ec2-user/prep/renewTopology.sh \"$MODEL\" \"$MNV\"", "\n",

"/opt/aurea/sonic2013/SDM8.6/bin/resetModel.sh data_dir=/aurea/Data/Sonic \"$MODEL\" environment=$MNV", "\n",
"if [ $? != \"0\" ] ; then", "\n",
"        return $?", "\n",
"fi;", "\n",
"#/opt/aurea/sonic2013/SDM8.6/bin/cleanDomain.sh \"$MODEL\" data_dir=/aurea/Data/Sonic hm_wait_time=60 environment=$MNV ", "logical_hosts=\"dshost,dsbakhost,broker1host,broker1bakhost,broker2host,broker2bakhost,pmobrokerhost,pmobrokerbakhost,esb1host,esb2host\"", "\n",
"/opt/aurea/sonic2013/SDM8.6/bin/cleanDomain.sh \"$MODEL\"  data_dir=/aurea/Data/Sonic  hm_wait_time=60 environment=$MNV", "\n",
"if [ $? != \"0\" ] ; then", "\n",
"        return $?", "\n",
"fi;", "\n",
"echo", "\n",
"echo cleanDomain completed. ", "\n",
"echo", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/installActionalAgent.sh" : {
                "content" : { "Fn::Join" : ["", [
"        echo  \"tbd\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/sonic.twmrc.defs" : {
                "content" : { "Fn::Join" : ["", [
"Button3 = : root : f.menu \"defops2\"", "\n",
"menu \"defops2\"", "\n",
"{", "\n",
"\"Sonic Utilities\" f.title", "\n",
"\"Sonic Management Console\" f.exec \"exec /opt/aurea/sonic2013/MQ8.6/bin/startmc.sh &\"", "\n",
"\"Sonic Workbench\" f.exec \"exec /opt/aurea/sonic2013/Workbench8.6/startworkbench.sh &\"", "\n",
"\"Progaia Message Manager\" f.exec \"exec /usr/bin/java -jar /opt/aurea/sonic2013/MQ8.6/lib/SonicMessageManager.jar &\"", "\n",
"\"Firefox\" f.exec \"exec /usr/bin/firefox &\"", "\n",
"}", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/SonicMessageManager.jar" : {
                "source" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/SonicMessageManager.jar",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/jhall.jar" : {
                "source" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/jhall.jar",
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/aurea/software/actional/AUREA_ACTIONAL_AGENT_2013.0.0.2_LNX.bin" : {
                "source" : "https://s3.amazonaws.com/actional-aurea/dev/archive_build/Management_Server/9.1.0/HotFixes/9.1.0.2/9.1002.40.136_(2013.0.0.2)/Actional_Agent/AUREA_ACTIONAL_AGENT_2013.0.0.2_LNX.bin",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              }
            }


            },
            "config2" : {
            "files" : {
               "/home/ec2-user/prep/fixHosts.sh" : {
                "content" : { "Fn::Join" : ["", [
"sudo sed -i \"/satellite/d\" /etc/hosts", "\n",

"echo  ", { "Ref" : "MachineInstance2IP"}, "| sed s/\\\\./-/g | awk '{ print  \"ip-\" $1 \".aurea.local\" }' > .t", "\n",  
"sudo echo  ", { "Ref" : "MachineInstance2IP"}, " `cat .t` satellite1  >> /etc/hosts", "\n",

"#last line", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               }, 
               "/home/ec2-user/prep/renewTopology.sh" : {
                "content" : { "Fn::Join" : ["", [
"xform() {", "\n",
"java -classpath /opt/aurea/sonic2013/ESB8.6/lib/saxon8.jar net.sf.saxon.Transform -o \"$1.out\" -s \"$@\"", "\n",
"}", "\n",
"MODEL=$1" , "\n",
"MNV=$2", "\n",
"if [ -z $2 ] ; then", "\n",
"        MNV=production", "\n",
"fi;", "\n",
"xform \"$MODEL/${MNV}Environment.xml\"  /home/ec2-user/prep/renewTopology.xsl",

" machine1ip=", {"Ref" : "MachineInstance1IP"} ,

" machine2ip=", {"Ref" : "MachineInstance2IP"} ,

"\n",
"mv \"$MODEL/productionEnvironment.xml.out\" \"$MODEL/productionEnvironment.xml\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               }, 
               "/home/ec2-user/prep/renewTopology.xsl" : {
                "content" : { "Fn::Join" : ["", [
"<xsl:stylesheet version=\"1.0\"", "\n",
" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">", "\n",
"\n",
"    <xsl:output omit-xml-declaration=\"yes\"/>", "\n",

"    <xsl:param name=\"machine1ip\"/>", "\n",

"    <xsl:param name=\"machine2ip\"/>", "\n",

"\n",
"    <xsl:template match=\"node()|@*\">", "\n",
"      <xsl:copy>", "\n",
"         <xsl:apply-templates select=\"node()|@*\"/>", "\n",
"      </xsl:copy>", "\n",
"    </xsl:template>", "\n",
"\n",

"    <xsl:template match=\"Machines/Machine[1]/Id\">", "\n",
"        <Id><xsl:value-of select=\"$machine1ip\"/></Id>", "\n",
"    </xsl:template>", "\n",

"    <xsl:template match=\"Machines/Machine[2]/Id\">", "\n",
"        <Id><xsl:value-of select=\"$machine2ip\"/></Id>", "\n",
"    </xsl:template>", "\n",

"\n",
"    <xsl:template match=\"Parameters\">", "\n",
"        <Parameters>", "\n",
"          <Parameter><Id>@Boot@</Id><Value>true</Value></Parameter>", "\n",
"        </Parameters>", "\n",
"    </xsl:template>", "\n",
"\n",
"</xsl:stylesheet>", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
               }
            }
            }
           },
           "AWS::CloudFormation::Authentication" : {
            "S3AccessCreds" : {
             "type" : "S3",
             "accessKeyId" : { "Ref" : "AWSAccessKey" },
             "secretKey" : { "Ref" : "AWSSecretKey" },
             "buckets" : [ "Aurea_Software_Transfers", "actional-aurea", "aurea-test-peaston", "sonic-aurea" ]
            }
           }
        },

      "Properties": {
        "DisableApiTermination": "FALSE",

        "SubnetId": "subnet-85b1d3ef",
        "SecurityGroupIds": [ "sg-85d43fea" ],

        "ImageId": "ami-730c631a",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sdh",
            "Ebs" : { "VolumeSize" : "20" }
          },
          {
            "DeviceName"  : "/dev/sdi",
            "VirtualName" : "ephemeral0"
          }
        ],

        "InstanceType": "m1.medium",
        "KeyName"  : { "Ref" : "KeyName" },
        "SourceDestCheck": "true",
        "Monitoring": "false",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "mkdir /aurea\n",
          "chmod a+rw /aurea\n",
          "mkfs -t ext4 /dev/xvdl\n",
          "mount /dev/xvdl /aurea\n",
          "sed -i \"/xvd1=/d\" /etc/fstab\n",
          "echo /dev/xvdl /aurea ext4 defaults 0 0 >> /etc/fstab\n",
         

          "cd /home/ec2-user\n",
          "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.zip\n",
          "unzip aws-cfn-*.zip\n",
          "cd aws-cfn*\n",
          "python setup.py install\n",
          "easy_install requests\n",
          "cd /home/ec2-user\n",
          "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata\n",
          "chmod a+x  ec2-metadata\n",
          "#manually yum these vnc-server dependencies first since rpm packages are installed first in cfn-init\n",
          "yum install -y xorg-x11-xauth\n",
          "yum install -y xorg-x11-fonts-misc\n",
          "yum install -y libXdmcp\n",
          "yum install -y xorg-x11-twm\n",
          "yum install -y firefox\n",
          "iptables -I INPUT -p tcp -m tcp --dport 2500:9000 -j ACCEPT\n",
          "service iptables save\n",
          "service iptables restart\n",

          "/usr/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --configsets initial  --resource SonicInstance1 --region ", { "Ref" : "AWS::Region" }, "\n",
           "cat /etc/X11/twm/system.twmrc /home/ec2-user/prep/sonic.twmrc.defs > /root/.twmrc\n",
           "export HOMESAV=\"$HOME\"\n",
           "export HOME=\"/root\"\n",
           "/usr/bin/vncpasswd << END\nAurea2013\nAurea2013\nEND\n" ,
           "/usr/bin/vncserver -geometry 1280x1024\n", 
           "export HOME=\"$HOMESAV\"\n",

          "hostname dmmanager\n",
          "sed -i \"/HOSTNAME=/d\" /etc/sysconfig/network\n",
          "echo HOSTNAME=`hostname`>> /etc/sysconfig/network\n",
          "#com.sonicsw.mf.framework.agent.ci.HostHelper looks up ec2 for dyn res\n",
          "echo `curl http://169.254.169.254/latest/meta-data/local-ipv4` `curl http://169.254.169.254/latest/meta-data/local-hostname`  `hostname` >> /etc/hosts\n" ,
          "/home/ec2-user/prep/installDMManager.sh\n",
          "/home/ec2-user/prep/installActionalManagementServer.sh\n",
          "/home/ec2-user/prep/installActionalAgent.sh\n",
          "/home/ec2-user/prep/installActionalTeamServer.sh\n",
          "/home/ec2-user/prep/installActionalIntermediary.sh\n",
          "cp /home/ec2-user/prep/jhall.jar /opt/aurea/sonic2013/MQ8.6/lib\n",
          "cp /home/ec2-user/prep/SonicMessageManager.jar /opt/aurea/sonic2013/MQ8.6/lib\n",
          "cp /opt/aurea/sonic2013/ESB8.6/lib/xq_co* /opt/aurea/sonic2013/SDM8.6/lib\n",
          "cp /opt/aurea/sonic2013/ESB8.6/schema/*  /opt/aurea/sonic2013/SDM8.6/schemas/esb/schema\n"

        ]]}},

                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Sonic_Instance1"
                    },

                    {
                        "Key": "Description",
                        "Value": "Sonic_Instance1"
                    },
                    {
                        "Key": "EnvironmentType",
                        "Value": {
                            "Ref": "EnvironmentType"
                        }
                    },

                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Owner"
                        }
                    },

                    {
                        "Key": "ProductName",
                        "Value": {
                            "Ref": "ProductName"
                        }
                    },
                    {
                        "Key": "ServiceLine",
                        "Value": {
                            "Ref": "ServiceLine"
                        }
                    }
                ]

      }
    },

    "SonicInstance2": {
      "Type": "AWS::EC2::Instance",

      "DependsOn": ["SonicInstance1"],

      "Metadata" : {

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "initial" : [ "config1" ],
            "secondary" : [ "config2" ]
          },
          "config1" : {
            "packages" : {
             "rpm" : {
              "vnc-server-4.1.2-14.el5_6.6.i386" : "ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/58/i386/SL/vnc-server-4.1.2-14.el5_6.6.i386.rpm"
              },
              "yum" : {
                "tcpdump"        : [],
                "strace"        : [],
                "java-1.7.0-openjdk"        : [],
                "xterm"        : []
              }
             },

            "sources" : {

              "/aurea/software/sonic/AUREA_SONIC_2013_UNIX" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/install.zip",
              "/aurea/software/launcher" : "https://s3.amazonaws.com/sonic-aurea/releases/ESD/ESD_2013/LAUNCHER/AUREA_SONIC_LAUNCHER_2013_UNIX.tar.gz",

              "/aurea/software/models" : "https://s3.amazonaws.com/aurea-test-peaston/sdmmodels/MusePhase1-RHEVSonicTests.zip",
              "/aurea/software" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/projects.tar"
            },
            "files" : {
               "/home/ec2-user/prep/installDMManager.sh" : {
                "content" : { "Fn::Join" : ["", [

"chmod a+x /aurea/software/sonic/AUREA_SONIC_2013_UNIX/install.bin", "\n",
"/aurea/software/sonic/AUREA_SONIC_2013_UNIX/install.bin -i silent", 
" -f \"/home/ec2-user/prep/DMManager.base.properties\"", "\n",

"/opt/aurea/sonic2013/Containers/Domain1.DomainManager/launchcontainer_batch.sh Domain1.DomainManager.log", "\n",
"exit", "\n"

                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/DMManager.base.properties" : {
                "content" : { "Fn::Join" : ["", [
"INSTALL_TYPE=new", "\n",
"INSTALLER_UI=silent", "\n",
"INSTALL_LOCATION=/opt/aurea/sonic2013", "\n",
"\n",
"USER_CHOSEN_INSTALL_SET=development", "\n",
"\n",
"ACCEPT_LICENSE_AGREEMENT=true", "\n",
"DEV_KEY=jmv88kqjmbc8e43", "\n",
"SDM_KEY=mrwgkqjmbc8e43", "\n",
"\n",
"CONFIGURE_DOMAIN=true", "\n",
"#MGMT_CONNECTION_URLS=tcp://dmmanager:2506", "\n",
"CONNECTION_URLS=tcp://dmmanager:2506", "\n",
"MGMT_BROKER_PORT=2506", "\n",
"ENABLE_SECURITY=true", "\n",
"SECURITY_USER_NAME=Administrator", "\n",
"SECURITY_PASSWORD=Administrator", "\n",
"CHOSEN_JVM_HOME=/usr/lib/jvm/jre-1.7.0-openjdk", "\n",
"CHOSEN_ECLIPSE_HOME=/opt/aurea/sonic2013/Workbench8.6/eclipse", "\n"

                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/installHostManager.sh" : {
                "content" : { "Fn::Join" : ["", [
"#!/bin/sh -xv", "\n",
"SATELLITE=satellite1", "\n",
"DOMAIN=ProductionDomain", "\n",
"URL=dmmanager:4500", "\n",
"USER=Administrator", "\n",
"PASSWORD=Administrator", "\n",
"\n",
"if [ -d /opt/aurea/soniclauncher2013 ] ; then", "\n",
"echo \"Deleting existing host manager\"", "\n",
"ps -ef | grep soniclauncher2013 | cut -c10-14 | tr '\r' \" \"  | tr '\n' \" \" | awk '{ print \"kill -9 \" $0 }' | bash", "\n",
"rm -rf /opt/aurea/soniclauncher2013", "\n",
"fi", "\n",
"\n",
"\n",
"HOSTNAME=`hostname`", "\n",
"CNAME=ctHm_\"$SATELLITE\"", "\n",
"CPATH=\"$DOMAIN\".\"$CNAME\"", "\n",
"echo \"Setting up Sonic container with host manager for hostname '$HOSTNAME'\"", "\n",
"sed \"/DOMAIN_NAME/d\" /home/ec2-user/prep/HostManager.base.properties > .t", "\n",
"echo \"DOMAIN_NAME=\"$DOMAIN >> .t", "\n",
"cp .t /home/ec2-user/prep/HostManager.base.properties", "\n",
"\n",

"/aurea/software/launcher/AUREA_SONIC_LAUNCHER_2013_UNIX/install_container_launcher.bin -i silent ",

"-D\\$DOMAIN_NAME\\$=$DOMAIN -D\\$CONNECTION_URLS\\$=$URL  -D\\$SECURITY_USER\\$=$USER ",
"-D\\$SECURITY_PASSWORD\\$=$PASSWORD -D\\$CONTAINER_NAME\\$=$CNAME ",
"-D\\$CONTAINER_PATH\\$=\"/Containers/$CNAME\" ",
"-f \"/home/ec2-user/prep/HostManager.base.properties\"", "\n",
"/opt/aurea/soniclauncher2013/Containers/\"$CPATH\"/launchcontainer_batch.sh $CPATH.log", "\n",
"exit", "\n"

                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/HostManager.base.properties" : {
                "content" : { "Fn::Join" : ["", [
"INSTALL_TYPE=new", "\n",
"INSTALL_LOCATION=/opt/aurea/soniclauncher2013", "\n",
"#Configure Container", "\n",
"#-------------------", "\n",
"CONFIGURE_CONTAINER=true", "\n",
"#Domain Manager Connection Properties", "\n",
"#------------------------------------", "\n",
"CONNECTION_URLS=tcp://localhost:2506", "\n",
"SECURITY_USER=Administrator", "\n",
"SECURITY_PASSWORD=Administrator", "\n",
"#The name of the container to configure", "\n",
"#--------------------------------------", "\n",
"CONTAINER_NAME=scripted", "\n",
"#The path for the configured container", "\n",
"#-------------------------------------", "\n",
"CONTAINER_PATH=/scripted/scripted", "\n",
"#Determine if the container configuration should be created if it does not", "\n",
"#exist", "\n",
"#------------------------------------------------------------------------", "\n",
"#-----", "\n",
"CREATE_CONTAINER_CONFIG=true", "\n",
"#The path for the host manager", "\n",
"#-----------------------------", "\n",
"HOST_MANAGER_PATH=/Framework Components/HOST MANAGER", "\n",
"#Should the host manager be configured?", "\n",
"#-------------------------------", "\n",
"HOST_MANAGER_ENABLED=true", "\n",
"#Chosen JVM Home directory", "\n",
"#-------------------------", "\n",
"CHOSEN_JVM_HOME=/usr/lib/jvm/jre-1.7.0-openjdk", "\n",
"#Launch Container Process", "\n",
"#------------------------", "\n",
"LAUNCH_CONTAINER=true", "\n",
"#------------------------", "\n",
"ACCEPT_LICENSE_AGREEMENT=true", "\n",
"\n",
"DOMAIN_NAME=Domain1", "\n"

                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/deployModel.sh" : {
                "content" : { "Fn::Join" : ["", [
"if [ -z $1 ] ; then", "\n",
"        echo  \"Usage: deployModel directory [environment]\"", "\n",
"        return 0", "\n",
"fi;", "\n",
"MODEL=$1", "\n",
"MNV=$2", "\n",
"if [ -z $2 ] ; then", "\n",
"        MNV=production", "\n",
"fi;", "\n",
"sudo /usr/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --configsets secondary --resource SonicInstance2 --region ", { "Ref" : "AWS::Region" }, "\n",
"/home/ec2-user/prep/fixHosts.sh", "\n",
"/home/ec2-user/prep/renewTopology.sh \"$MODEL\" \"$MNV\"", "\n",

"/opt/aurea/sonic2013/SDM8.6/bin/resetModel.sh data_dir=/aurea/Data/Sonic \"$MODEL\" environment=$MNV", "\n",
"if [ $? != \"0\" ] ; then", "\n",
"        return $?", "\n",
"fi;", "\n",
"#/opt/aurea/sonic2013/SDM8.6/bin/cleanDomain.sh \"$MODEL\" data_dir=/aurea/Data/Sonic hm_wait_time=60 environment=$MNV ", "logical_hosts=\"dshost,dsbakhost,broker1host,broker1bakhost,broker2host,broker2bakhost,pmobrokerhost,pmobrokerbakhost,esb1host,esb2host\"", "\n",
"/opt/aurea/sonic2013/SDM8.6/bin/cleanDomain.sh \"$MODEL\"  data_dir=/aurea/Data/Sonic  hm_wait_time=60 environment=$MNV", "\n",
"if [ $? != \"0\" ] ; then", "\n",
"        return $?", "\n",
"fi;", "\n",
"echo", "\n",
"echo cleanDomain completed. ", "\n",
"echo", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/installActionalAgent.sh" : {
                "content" : { "Fn::Join" : ["", [
"        echo  \"tbd\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/sonic.twmrc.defs" : {
                "content" : { "Fn::Join" : ["", [
"Button3 = : root : f.menu \"defops2\"", "\n",
"menu \"defops2\"", "\n",
"{", "\n",
"\"Sonic Utilities\" f.title", "\n",
"\"Sonic Management Console\" f.exec \"exec /opt/aurea/sonic2013/MQ8.6/bin/startmc.sh &\"", "\n",
"\"Sonic Workbench\" f.exec \"exec /opt/aurea/sonic2013/Workbench8.6/startworkbench.sh &\"", "\n",
"\"Progaia Message Manager\" f.exec \"exec /usr/bin/java -jar /opt/aurea/sonic2013/MQ8.6/lib/SonicMessageManager.jar &\"", "\n",
"\"Firefox\" f.exec \"exec /usr/bin/firefox &\"", "\n",
"}", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/SonicMessageManager.jar" : {
                "source" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/SonicMessageManager.jar",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/home/ec2-user/prep/jhall.jar" : {
                "source" : "https://s3.amazonaws.com/aurea-test-peaston/Sonic2013/jhall.jar",
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/aurea/software/actional/AUREA_ACTIONAL_AGENT_2013.0.0.2_LNX.bin" : {
                "source" : "https://s3.amazonaws.com/actional-aurea/dev/archive_build/Management_Server/9.1.0/HotFixes/9.1.0.2/9.1002.40.136_(2013.0.0.2)/Actional_Agent/AUREA_ACTIONAL_AGENT_2013.0.0.2_LNX.bin",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              }
            }


            },
            "config2" : {
            "files" : {
               "/home/ec2-user/prep/fixHosts.sh" : {
                "content" : { "Fn::Join" : ["", [
"sudo sed -i \"/satellite/d\" /etc/hosts", "\n",

"echo  ", { "Ref" : "MachineInstance2IP"}, "| sed s/\\\\./-/g | awk '{ print  \"ip-\" $1 \".aurea.local\" }' > .t", "\n",  
"sudo echo  ", { "Ref" : "MachineInstance2IP"}, " `cat .t` satellite1  >> /etc/hosts", "\n",

"#last line", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               }, 
               "/home/ec2-user/prep/renewTopology.sh" : {
                "content" : { "Fn::Join" : ["", [
"xform() {", "\n",
"java -classpath /opt/aurea/sonic2013/ESB8.6/lib/saxon8.jar net.sf.saxon.Transform -o \"$1.out\" -s \"$@\"", "\n",
"}", "\n",
"MODEL=$1" , "\n",
"MNV=$2", "\n",
"if [ -z $2 ] ; then", "\n",
"        MNV=production", "\n",
"fi;", "\n",
"xform \"$MODEL/${MNV}Environment.xml\"  /home/ec2-user/prep/renewTopology.xsl",

" machine1ip=", {"Ref" : "MachineInstance1IP"} ,

" machine2ip=", {"Ref" : "MachineInstance2IP"} ,

"\n",
"mv \"$MODEL/productionEnvironment.xml.out\" \"$MODEL/productionEnvironment.xml\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               }, 
               "/home/ec2-user/prep/renewTopology.xsl" : {
                "content" : { "Fn::Join" : ["", [
"<xsl:stylesheet version=\"1.0\"", "\n",
" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">", "\n",
"\n",
"    <xsl:output omit-xml-declaration=\"yes\"/>", "\n",

"    <xsl:param name=\"machine1ip\"/>", "\n",

"    <xsl:param name=\"machine2ip\"/>", "\n",

"\n",
"    <xsl:template match=\"node()|@*\">", "\n",
"      <xsl:copy>", "\n",
"         <xsl:apply-templates select=\"node()|@*\"/>", "\n",
"      </xsl:copy>", "\n",
"    </xsl:template>", "\n",
"\n",

"    <xsl:template match=\"Machines/Machine[1]/Id\">", "\n",
"        <Id><xsl:value-of select=\"$machine1ip\"/></Id>", "\n",
"    </xsl:template>", "\n",

"    <xsl:template match=\"Machines/Machine[2]/Id\">", "\n",
"        <Id><xsl:value-of select=\"$machine2ip\"/></Id>", "\n",
"    </xsl:template>", "\n",

"\n",
"    <xsl:template match=\"Parameters\">", "\n",
"        <Parameters>", "\n",
"          <Parameter><Id>@Boot@</Id><Value>true</Value></Parameter>", "\n",
"        </Parameters>", "\n",
"    </xsl:template>", "\n",
"\n",
"</xsl:stylesheet>", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
               }
            }
            }
           },
           "AWS::CloudFormation::Authentication" : {
            "S3AccessCreds" : {
             "type" : "S3",
             "accessKeyId" : { "Ref" : "AWSAccessKey" },
             "secretKey" : { "Ref" : "AWSSecretKey" },
             "buckets" : [ "Aurea_Software_Transfers", "actional-aurea", "aurea-test-peaston", "sonic-aurea" ]
            }
           }
        },

      "Properties": {
        "DisableApiTermination": "FALSE",

        "SubnetId": "subnet-85b1d3ef",
        "SecurityGroupIds": [ "sg-85d43fea" ],

        "ImageId": "ami-730c631a",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sdh",
            "Ebs" : { "VolumeSize" : "20" }
          },
          {
            "DeviceName"  : "/dev/sdi",
            "VirtualName" : "ephemeral0"
          }
        ],

        "InstanceType": "m1.medium",
        "KeyName"  : { "Ref" : "KeyName" },
        "SourceDestCheck": "true",
        "Monitoring": "false",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "mkdir /aurea\n",
          "chmod a+rw /aurea\n",
          "mkfs -t ext4 /dev/xvdl\n",
          "mount /dev/xvdl /aurea\n",
          "sed -i \"/xvd1=/d\" /etc/fstab\n",
          "echo /dev/xvdl /aurea ext4 defaults 0 0 >> /etc/fstab\n",
         

          "cd /home/ec2-user\n",
          "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.zip\n",
          "unzip aws-cfn-*.zip\n",
          "cd aws-cfn*\n",
          "python setup.py install\n",
          "easy_install requests\n",
          "cd /home/ec2-user\n",
          "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata\n",
          "chmod a+x  ec2-metadata\n",
          "#manually yum these vnc-server dependencies first since rpm packages are installed first in cfn-init\n",
          "yum install -y xorg-x11-xauth\n",
          "yum install -y xorg-x11-fonts-misc\n",
          "yum install -y libXdmcp\n",
          "yum install -y xorg-x11-twm\n",
          "yum install -y firefox\n",
          "iptables -I INPUT -p tcp -m tcp --dport 2500:9000 -j ACCEPT\n",
          "service iptables save\n",
          "service iptables restart\n",

          "/usr/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --configsets initial  --resource SonicInstance2 --region ", { "Ref" : "AWS::Region" }, "\n",
           "cat /etc/X11/twm/system.twmrc /home/ec2-user/prep/sonic.twmrc.defs > /root/.twmrc\n",
           "export HOMESAV=\"$HOME\"\n",
           "export HOME=\"/root\"\n",
           "/usr/bin/vncpasswd << END\nAurea2013\nAurea2013\nEND\n" ,
           "/usr/bin/vncserver -geometry 1280x1024\n", 
           "export HOME=\"$HOMESAV\"\n",

          "hostname satellite1\n",
          "sed -i \"/HOSTNAME=/d\" /etc/sysconfig/network\n",
          "echo HOSTNAME=`hostname`>> /etc/sysconfig/network\n",
          "#com.sonicsw.mf.framework.agent.ci.HostHelper looks up ec2 for dyn res\n",
          "echo `curl http://169.254.169.254/latest/meta-data/local-ipv4` `curl http://169.254.169.254/latest/meta-data/local-hostname`  `hostname` >> /etc/hosts\n" ,
          "echo  ",{"Fn::GetAtt" : ["SonicInstance1", "PrivateIp"] },"| sed s/\\\\./-/g | awk '{ print  \"ip-\" $1 \".aurea.local\" }' > .t", "\n",  
          "echo ", {"Fn::GetAtt" : ["SonicInstance1", "PrivateIp"] }, " `cat .t` ",  {"Fn::GetAtt" : ["SonicInstance1", "PrivateDnsName"] }, " dmmanager >> /etc/hosts\n", 
          "/home/ec2-user/prep/installHostManager.sh\n",
          "/home/ec2-user/prep/installActionalAgent.sh\n"

        ]]}},

                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Sonic_Instance2"
                    },

                    {
                        "Key": "Description",
                        "Value": "Sonic_Instance2"
                    },
                    {
                        "Key": "EnvironmentType",
                        "Value": {
                            "Ref": "EnvironmentType"
                        }
                    },

                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Owner"
                        }
                    },

                    {
                        "Key": "ProductName",
                        "Value": {
                            "Ref": "ProductName"
                        }
                    },
                    {
                        "Key": "ServiceLine",
                        "Value": {
                            "Ref": "ServiceLine"
                        }
                    }
                ]

      }
    },

    "ActionalInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "initial" : [ "config1" ],
          },
          "config1" : {
            "packages" : {
             "rpm" : {
              "vnc-server-4.1.2-14.el5_6.6.i386" : "ftp://mirror.switch.ch/pool/1/mirror/scientificlinux/58/i386/SL/vnc-server-4.1.2-14.el5_6.6.i386.rpm"
              },
              "yum" : {
                "tcpdump"        : [],
                "strace"        : [],
                "java-1.7.0-openjdk"        : [],
                "xterm"        : []
              }
             },

            "sources" : {
            },
            "files" : {
               "/home/ec2-user/prep/sst.properties" : {
                "content" : { "Fn::Join" : ["", [
"INSTALLER_UI=silent", "\n",
"USER_INSTALL_DIR=/opt/aurea/actional/ActionalSST", "\n",
"debug.file=/opt/aurea/actional/ActionalSST/ActionalSSTInstall.log", "\n",
"enable.buttongroup=false", "\n",
"debug.mode=true", "\n",
"install.set=full", "\n",
"sst.jetty=true", "\n",
"docs.all=true", "\n",
"port.http=8620", "\n",
"port.https=8621", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/installActionalManagementServer.sh" : {
                "content" : { "Fn::Join" : ["", [
"        echo  \"tbd\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/installActionalIntermediary.sh" : {
                "content" : { "Fn::Join" : ["", [
"echo FHHFU-S6ULB-T9ZLR-9DC4Q-UXJTY-469P7", "\n",
"/aurea/software/actional/AUREA_ACTIONAL_INTERMEDIARY_2013.0.0.2_LNX.bin -f /home/ec2-user/prep/sst.properties", "\n" 
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/installActionalTeamServer.sh" : {
                "content" : { "Fn::Join" : ["", [
"        echo  \"2P8s-lnxT-tXN6-Eo76-Q3eA-/8fo-pwSr-5oJU\"", "\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/debugActionalIntermediary.sh" : {
                "content" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "export ACTIONAL_JAVA_OPTS=\"-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,suspend=n,server=y,address=7996\"\n",
          "/opt/aurea/actional/ActionalSST/DefaultProfile/bin/StartActionalIntermediary.sh\n"
                ]]},
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
               },
               "/home/ec2-user/prep/sonic.twmrc.defs" : {
                "content" : { "Fn::Join" : ["", [
"Button3 = : root : f.menu \"defops2\"", "\n",
"menu \"defops2\"", "\n",
"{", "\n",
"\"Actional Utilities\" f.title", "\n",
"\"Start Intermediary\" f.exec \"exec /home/ec2-user/prep/debugActionalIntermediary.sh &\"", "\n",
"\"Stop Intermediary\" f.exec \"exec /opt/aurea/actional/ActionalSST/DefaultProfile/bin/StopActionalIntermediary &\"", "\n",
"\"Start TeamServer\" f.exec \"exec /opt/aurea/actional/ActionalTeamServer/ActionalTeamServer start&\"", "\n",
"\"Stop TeamServer\" f.exec \"exec /opt/aurea/actional/ActionalTeamServer/ActionalTeamServer stop&\"", "\n",
"\"Firefox\" f.exec \"exec /usr/bin/firefox &\"", "\n",
"}", "\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },
               "/aurea/software/actional/AUREA_ACTIONAL_MANAGEMENT_SERVER_2013.0.0.2_LNX.bin" : {
                "source" : "https://s3.amazonaws.com/actional-aurea/dev/archive_build/Management_Server/9.1.0/HotFixes/9.1.0.2/9.1002.40.136_(2013.0.0.2)/Actional_Management_Server/AUREA_ACTIONAL_MANAGEMENT_SERVER_2013.0.0.2_LNX.bin",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/aurea/software/actional/AUREA_ACTIONAL_INTERMEDIARY_2013.0.0.2_LNX.bin" : {
                "source" : "https://s3.amazonaws.com/actional-aurea/dev/archive_build/Management_Server/9.1.0/HotFixes/9.1.0.2/9.1002.40.136_(2013.0.0.2)/Actional_Intermediary/AUREA_ACTIONAL_INTERMEDIARY_2013.0.0.2_LNX.bin",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              },
               "/aurea/software/actional/PROGRESS_ACTIONAL_TEAM_SERVER_9.0.0_LNX.bin" : {
                "source" : "https://s3.amazonaws.com/actional-aurea/dev/archive_build/Team_Server/9.0.0/FCS/20121204_1713/PROGRESS_ACTIONAL_TEAM_SERVER_9.0.0_LNX.bin",
                "mode"    : "000755",
                "owner"   : "root",
                "group"   : "root"
              }
            }


            },
            "config2" : {
            "files" : {
            }
            }
           },
           "AWS::CloudFormation::Authentication" : {
            "S3AccessCreds" : {
             "type" : "S3",
             "accessKeyId" : { "Ref" : "AWSAccessKey" },
             "secretKey" : { "Ref" : "AWSSecretKey" },
             "buckets" : [ "Aurea_Software_Transfers", "actional-aurea", "aurea-test-peaston", "sonic-aurea" ]
            }
           }
        },

      "Properties": {
        "DisableApiTermination": "FALSE",

        "SubnetId": "subnet-85b1d3ef",
        "SecurityGroupIds": [ "sg-85d43fea" ],

        "ImageId": "ami-730c631a",
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/sdh",
            "Ebs" : { "VolumeSize" : "20" }
          },
          {
            "DeviceName"  : "/dev/sdi",
            "VirtualName" : "ephemeral0"
          }
        ],

        "InstanceType": "m1.medium",
        "KeyName"  : { "Ref" : "KeyName" },
        "SourceDestCheck": "true",
        "Monitoring": "false",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "mkdir /aurea\n",
          "chmod a+rw /aurea\n",
          "mkfs -t ext4 /dev/xvdl\n",
          "mount /dev/xvdl /aurea\n",
          "sed -i \"/xvd1=/d\" /etc/fstab\n",
          "echo /dev/xvdl /aurea ext4 defaults 0 0 >> /etc/fstab\n",
         

          "cd /home/ec2-user\n",
          "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.zip\n",
          "unzip aws-cfn-*.zip\n",
          "cd aws-cfn*\n",
          "python setup.py install\n",
          "easy_install requests\n",
          "cd /home/ec2-user\n",
          "wget http://s3.amazonaws.com/ec2metadata/ec2-metadata\n",
          "chmod a+x  ec2-metadata\n",
          "#manually yum these vnc-server dependencies first since rpm packages are installed first in cfn-init\n",
          "yum install -y xorg-x11-xauth\n",
          "yum install -y xorg-x11-fonts-misc\n",
          "yum install -y libXdmcp\n",
          "yum install -y xorg-x11-twm\n",
          "yum install -y firefox\n",
          "iptables -I INPUT -p tcp -m tcp --dport 2500:9000 -j ACCEPT\n",
          "service iptables save\n",
          "service iptables restart\n",

          "/usr/bin/cfn-init --stack ", { "Ref" : "AWS::StackId" }, " --configsets initial  --resource Actionalnstance --region ", { "Ref" : "AWS::Region" }, "\n",
           "cat /etc/X11/twm/system.twmrc /home/ec2-user/prep/sonic.twmrc.defs > /root/.twmrc\n",
           "export HOMESAV=\"$HOME\"\n",
           "export HOME=\"/root\"\n",
           "/usr/bin/vncpasswd << END\nAurea2013\nAurea2013\nEND\n" ,
           "/usr/bin/vncserver -geometry 1280x1024\n", 
           "export HOME=\"$HOMESAV\"\n",

          "hostname actionalmanager\n",
          "sed -i \"/HOSTNAME=/d\" /etc/sysconfig/network\n",
          "echo HOSTNAME=`hostname`>> /etc/sysconfig/network\n",
          "#com.sonicsw.mf.framework.agent.ci.HostHelper looks up ec2 for dyn res\n",
          "echo `curl http://169.254.169.254/latest/meta-data/local-ipv4` `curl http://169.254.169.254/latest/meta-data/local-hostname`  `hostname` >> /etc/hosts\n" ,
          "/home/ec2-user/prep/installActionalManagementServer.sh\n",
          "/home/ec2-user/prep/installActionalTeamServer.sh\n",
          "/home/ec2-user/prep/installActionalIntermediary.sh\n",
        ]]}},

                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Actional_Instance"
                    },

                    {
                        "Key": "Description",
                        "Value": "Actional_Instance"
                    },
                    {
                        "Key": "EnvironmentType",
                        "Value": {
                            "Ref": "EnvironmentType"
                        }
                    },

                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "Owner"
                        }
                    },

                    {
                        "Key": "ProductName",
                        "Value": {
                            "Ref": "ProductName"
                        }
                    },
                    {
                        "Key": "ServiceLine",
                        "Value": {
                            "Ref": "ServiceLine"
                        }
                    }
                ]

      }
    },


    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "AllocatedStorage": "50",
        "AutoMinorVersionUpgrade": "true",
        "BackupRetentionPeriod": "3",
        "DBInstanceClass": "db.m1.small",
        "DBName": "SonicDB",
        "Engine": "oracle-se1",
        "EngineVersion": "11.2.0.2.v7",
        "LicenseModel": "license-included",

        "VPCSecurityGroups": [ "sg-85d43fea" ],
        "DBSubnetGroupName": "devproduction",

        "MasterUsername": "ebms",
        "MasterUserPassword": "Aurea2013",
        "Port": "1521",
        "PreferredBackupWindow": "03:41-04:11",
        "PreferredMaintenanceWindow": "mon:10:16-mon:10:46",

                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SonicDBInstance"
                    },

                    {
                        "Key": "Description",
                        "Value": "Sonic DBInstance"
                    },
                    {
                        "Key": "EnvironmentType",
                        "Value": {
                            "Ref": "EnvironmentType"
                        }
                    },

                    {
                        "Key": "Owner",
                        "Value": "peaston"
                    },

                    {
                        "Key": "ProductName",
                        "Value": {
                            "Ref": "ProductName"
                        }
                    },
                    {
                        "Key": "ServiceLine",
                        "Value": {
                            "Ref": "ServiceLine"
                        }
                    }
                ]

      }
    },

    "DummyWaitHandle" : {
        "Type" : "AWS::CloudFormation::WaitConditionHandle",
        "Properties" : {
        }
    }
  },


  "Outputs" : {
     "NewUserDataSettings": {
      "Description" : "Successfully generated the following Sonic machines.",
      "Value": {
          "Fn::Join" : ["", [
          "ActionalInstanceIP=",  {"Fn::GetAtt" : ["ActionalInstance", "PrivateIp"]}, "\n",

          "MachineInstance1IP=",  {"Fn::GetAtt" : ["SonicInstance1", "PrivateIp"]}, "\n",

          "MachineInstance2IP=",  {"Fn::GetAtt" : ["SonicInstance2", "PrivateIp"]}, "\n"

 ] ]
       }
      }
    }


}
