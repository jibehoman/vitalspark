/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2016-03-30 21:27:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.flows;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class services_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<div>\n");
      out.write("\t<h2 class=\"alt\">Services</h2>\n");
      out.write("\t<h4 class=\"alt\"><a href=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\">Home</a></h4>\n");
      out.write("\t<div class=\"span-4 colborder\">\n");
      out.write("\t\t<h6>Add new services</h6>\n");
      out.write("\t\t<br/>Aurea Experience Activator makes it easy to add new service\n");
      out.write("\t\tcapability to your existing \n");
      out.write("\t\tinfrastructure. Capabilities are available in the Aurea Asset Repository. These capabilities include\n");
      out.write("\t\tbest-of-breed services written by Aurea field and service development experts. Customer built services are\n");
      out.write("\t\talso supported. Assets can fall into a number of different categories including EAI adapters, on-ramps and off-ramps,\n");
      out.write("\t\tinterceptors(Sonic and Actional), custom services and processes, and industry standard data model intelligence\n");
      out.write("\t\tcomponents.\n");
      out.write("\t\t</p>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"span-14 colborder\">\n");
      out.write("\t\t<h3 class=\"alt\">Add new Services</h3>\n");
      out.write("\t\t<div id=\"servicesFlow\">\n");
      out.write("\t\t\t<a id=\"startFlow\" href=\"services-flow\">Add New Services Now</a>\n");
      out.write("\t\t\t<script type=\"text/javascript\">\n");
      out.write("\t\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:\"startFlow\",event:\"onclick\",params:{fragments:\"body\",mode:\"embedded\"}}));\n");
      out.write("\t\t\t</script>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"span-5\">\n");
      out.write("\t\t<h6>Medium Do List(prototyping)</h6>\n");
      out.write("\t\t<ol compact>\n");
      out.write("\t\t<li>Meta-data for \"distillate\" parameter concept is needed. Most generated parameterDeclarations.xml\n");
      out.write("\t\t(whether Field Maven or DREM generated) entries are \"good to go\". In a large part this is because\n");
      out.write("\t\tsonicfs:// references and other settings are highly portable. Distillate is a concept of a parameter that\n");
      out.write("\t\tyou might want to change in a Webflow UI like this(e.g. REST base URLs), or, that you want to appear in\n");
      out.write("\t\tthe Webflow UI for concept reinforcement purposes(some of the DS parameters are \"re-confirmed\").  \n");
      out.write("\t\t<li>Distillates need UIs generated to enter parameters in a friendly fashion. Their appearance via\n");
      out.write("\t\tparameterDeclarations.xml is always available through the UI - but we can do better like\n");
      out.write("\t\tthe Universal REST flow presents.</li>\n");
      out.write("\t\t<li>We MUST define the nature of a service(artifact wise) in the repository. A .xar may be all that\n");
      out.write("\t\tis needed. But the parameterDeclarations.xml generation magic needs to occur somewhere.</li>\n");
      out.write("\t\t<li>Placement(Topology.xml), tuning DefaultTuning.xml, and Tuning.xml all need to be calculated\n");
      out.write("\t\tproperly. </li>\n");
      out.write("\t\t<li>Feed from Field service-type Maven projects to this system required</li>\n");
      out.write("\t\t</ol>\n");
      out.write("\t\t<h6>Long Term Do List</h6>\n");
      out.write("\t\t<ol compact>\n");
      out.write("\t\t<li>Get a real repository e.g. Jack Rabbit because:</li>\n");
      out.write("\t\t<li>Leverage the repository tagging system for ALL of these questions.\n");
      out.write("\t\t<ul compact>\n");
      out.write("\t\t <li>Which business container do you go in?\n");
      out.write("\t\t <li>Which business section do you go in?(translation - DRA/SDM segment)?\n");
      out.write("\t\t <li>What constraints you under?\n");
      out.write("\t\t<ul compact>\n");
      out.write("\t\t <li>Versions of course matter\n");
      out.write("\t\t <li>Dependencies matter\n");
      out.write("\t\t <li>You are only permitted to deploy this accounting procedure in Europe\n");
      out.write("\t\t <li>You are only allowed a singleton instance, maybe port issues e.g. a Web Service\n");
      out.write("\t\t <li>You are only allowed a 5 instances because that is all you are paid up for\n");
      out.write("\t\t <li>You are load-balance capable\n");
      out.write("\t\t <li>You are the <font color=\"Red\"><b>new!</font></b> esbtraceroute interceptor that need to be ubiquitous(in all containers)\n");
      out.write("\t\t </ul>\n");
      out.write("\t\t </ul>\n");
      out.write("\t\t <li>We can simplify our process model. Because of the orthogonal repository tagging\n");
      out.write("\t\t we can remove some of the obscure settings(\"OnRamp\" and \"StrictMessageOrder\") that don't\n");
      out.write("\t\t belong.\n");
      out.write("\t\t <li>Multiple repos requirement(customer's own repo) will come fast.\n");
      out.write("\t\t</li>\n");
      out.write("\t\t<li>Truly run updateDomain with restarts that respect 24x7 - we need to ensure any SDM bugs here are ironed\n");
      out.write("\t\t out - but I also think we need implicit in SDM a 24x7 smart SDM update where it is obvious that that\n");
      out.write("\t\t is what the configuration represents.</li>\n");
      out.write("\t\t</ol>\n");
      out.write("\t\t<h6>Takeaways</h6>\n");
      out.write("\t\t<ol compact>\n");
      out.write("\t\t<li>Non SOAP/REST EAI thru SonicConnect's Camel nature is a much closer reality</li>\n");
      out.write("\t\t<li>We need talk to Adaptris on this and on \"Typed Integration Service\" service paradigm, i.e. what is the current Adaptris integration? If\n");
      out.write("\t\t it is JMS to EAI bridging, we might be able to do a lot better with the itinerary integration experience</li>\n");
      out.write("\t\t</ol>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(null);
    // /WEB-INF/flows/services.jsp(4,26) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue("/");
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }
}
