/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2016-03-30 21:26:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.flows.commission_002dflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class testModel_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<div id=\"commissionFlow\">\n");
      out.write("\t<div class=\"span-7\">\n");
      out.write("\t<p class=\"notice\">Select Test Model</p>\n");
      out.write("\t<form id=\"testModel\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${flowExecutionUrl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" method=\"POST\">\n");
      out.write("\t\t<h:outputLabel>Select Test Features: </h:outputLabel>\n");
      out.write("\t\t<br/>\n");
      out.write("          <p>\n");
      out.write("              <input type=\"checkbox\" name=\"testFeatures\" value=\"ATS\" />Subscribe To Aurea Test Service</br>\n");
      out.write("          </p>\n");
      out.write(" \t\t<button id=\"cancel\" type=\"submit\" name=\"_eventId_cancel\">Cancel</button>\n");
      out.write("\t\t<button id=\"previous\" type=\"submit\" name=\"_eventId_previous\">&lt;&lt; Previous</button>\n");
      out.write("\t\t<button id=\"finish\" type=\"submit\" name=\"_eventId_finish\">Finish &gt;&gt;</button>\n");
      out.write("\t\t<script type=\"text/javascript\">\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'finish',event:'onclick',formId:'testModel',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'previous',event:'onclick',formId:'testModel',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'testModel',params:{fragments:\"body\"}}));\n");
      out.write("\t\t</script>\n");
      out.write("\t</form>\n");
      out.write("</div>\n");
      out.write("\t<div class=\"span-6 last\">\n");
      out.write("\t<div style=\"margin-left: 1em;\">\n");
      out.write("\t\t<h6>Test Model</h6>\n");
      out.write("\t\t<p>Large deployments whether in-cloud, on-premise, or mixed, require performance and system testing. Leverage the Aurea Test Service to facilitate automated on-ramp testing and simulation of externally accessed systems.<p>\n");
      out.write("\t\t\t\t<br/>\n");
      out.write("\t\tAurea Test Service provides a comprehensive set of tools and capabilities for\n");
      out.write("\t\ttesting your application both for functional and for load-testing. <br/><br/>You may operate this \n");
      out.write("\t\tservice yourself, or, sign up to the service on a <i>subscription basis</i>. \n");
      out.write("\t\tWhen you sign up on a subscription basis\n");
      out.write("\t\tAurea will perform testing for you and make performance recommendations for you.\n");
      out.write("\t\t<br/><br/>\n");
      out.write("\t\tAurea Test Service uses unique technology which we call <i>light and dark</i>.\n");
      out.write("\t\tYour live production environment stays up and running in the light whilst we benchmark\n");
      out.write("\t\tagainst the dark system. When testing and re-tuning is complete, we will flip the switch\n");
      out.write("\t\tto bring the dark system live.  \n");
      out.write("\t\t<br/><br/>\n");
      out.write("\t\tFurther, Aurea Test Service allows you to reuse test artifacts from your continuous build and test environment. Sonic Workbench\n");
      out.write("\t\ttest scenarios may be re-run these in a fully integrated performance test environment. Aurea Test Service\n");
      out.write("\t\tallows you to re-point consumed services from live to test service endpoints, or, to stub test services that\n");
      out.write("\t\tcan replay responses based on historical interaction patterns.\n");
      out.write("\t\t from test stub services. \n");
      out.write("\t\t<br><br><b>Notes</b>:\n");
      out.write("\t\t<br>\n");
      out.write("\t\tNobody has talked about testing. Customers like BA are looking out for our help here(Stubomatic is their stub replay architecture that we\n");
      out.write("\t\tshould ask IP for). \n");
      out.write("\t\tThe Sonic acquisition of Mindreef which we, Aurea, now own, has fallen off the\n");
      out.write("\t\tmap. Mindreef had some cool features - I really liked the compose-ability of scenarios for load\n");
      out.write("\t\ttest building. At one time, real Sonic integration(i.e. deal with JMS Topics(Mindreef is Queue only) and\n");
      out.write("\t\tmodelling with the ESB Endpoint concept) was considered but never happened. I fear that Mindreef is now\n");
      out.write("\t\tpasse(look at SmartBear Soap/UI). But with or without Mindreef, we need to make a story here. \n");
      out.write("\t\t<br><br>\n");
      out.write("\t\tObviously <i>light and dark</i> is challenging(i.e. switch the dark to light), but we should <i>aspire</i>\n");
      out.write("\t\tto something like this.<br/><br/>\n");
      out.write("\t\tFor testing, there is an argument that we encourage the <i>subscription basis</i> rather than customer DIY basis.\n");
      out.write("\t\tAt ActiveHealth we lost control of the account because the customer pounded the system in a way that made\n");
      out.write("\t\tno sense to his actual usage scenarios. We found ourselves in the back seat, constantly on the defensive trying to\n");
      out.write("\t\texplain system performance characteristics of a load-test that made no sense.\n");
      out.write("\t\t<br/><br/>\n");
      out.write("\t\tWe have to address an obvious question here. Why do I need capacity planning and load-testing,\n");
      out.write("\t\twhy cannot auto-scaling work for me? The question is valid and needs answering.\n");
      out.write("\t\tPart of the answer may  be that firing up new machines\n");
      out.write("\t\tis too coarse a form of performance problem mitigation, and that system bottlenecks rarely occur \n");
      out.write("\t\tat this level of coarseness. The answer may also lay in the nature of a truly globally distributed\n");
      out.write("\t\tapplication(we are not a WebServer that just horizontally scales). What ever answer we come up \n");
      out.write("\t\twith we should not be caught bad-mouthing \n");
      out.write("\t\tcloud vendors and auto-scaling in general, nor should we discount the possibility that some parts\n");
      out.write("\t\tof our system are candidates for auto-scaling techniques.\n");
      out.write("\t\t<br/> <br/>\n");
      out.write("What do you think? What do your customers ask about testing? <a href=\"http://jira.aurea.local/browse/ESB-7482\" target=\"_blank\">feedback</a> \t\t\n");
      out.write("\t</div>\n");
      out.write("\t\t</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
