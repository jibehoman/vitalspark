/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2016-03-30 21:27:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.flows.services_002dflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class productionDomain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<div id=\"servicesFlow\" xmlns:h=\"http://java.sun.com/jsf/html\">\n");
      out.write("\t<div class=\"span-7\">\n");
      out.write("\t<p class=\"notice\">Enter Domain Connection Information</p>\n");
      out.write("\t<form id=\"productionDomain\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${flowExecutionUrl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" method=\"POST\">\n");
      out.write("\t   <div>\n");
      out.write("       <div class=\"span-4\">\t\n");
      out.write("\t\t <h:outputLabel>Domain Name: </h:outputLabel>\n");
      out.write("       </div>\n");
      out.write("       <div class=\"span-7 last\">\n");
      out.write("\t\t <input name=\"domainName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${services.domainName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\n");
      out.write("       </div>\n");
      out.write("       </div>\n");
      out.write("\t   <div>\n");
      out.write("       <div class=\"span-4\">\n");
      out.write("\t\t  <h:outputLabel>User: </h:outputLabel>\n");
      out.write("       </div>\n");
      out.write("       <div class=\"span-7 last\">\n");
      out.write("\t\t<input name=\"userName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${services.userName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\n");
      out.write("       </div>\n");
      out.write("       </div>\n");
      out.write("\t   <div>\n");
      out.write("       <div class=\"span-4\">\n");
      out.write("\t\t <h:outputLabel>Password: </h:outputLabel>\n");
      out.write("       </div>\n");
      out.write("       <div class=\"span-7 last\">\n");
      out.write("\t\t <input name=\"password\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${services.password}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("       </div>\n");
      out.write("\t   <div>\n");
      out.write("       <div class=\"span-4\">\n");
      out.write("\t\t<h:outputLabel>Url: </h:outputLabel>\n");
      out.write("       </div>\n");
      out.write("       <div class=\"span-7 last\">\n");
      out.write("\t\t<input name=\"url\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${services.url}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\">\n");
      out.write("        </div>\n");
      out.write("       </div>\n");
      out.write("\t\t<button id=\"previous\" type=\"submit\" name=\"_eventId_previous\">Previous &lt;&lt;</button>\n");
      out.write("\t\t<button id=\"next\" type=\"submit\" name=\"_eventId_next\">Next &gt;&gt;</button>\n");
      out.write("\t\t<button id=\"cancel\" type=\"submit\" name=\"_eventId_cancel\">Cancel</button>\n");
      out.write("\t\t<script type=\"text/javascript\">\n");
      out.write("\t\t    Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'previous',event:'onclick',formId:'productionDomain',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'productionDomain',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'productionDomain',params:{fragments:\"body\"}}));\n");
      out.write("\t\t</script>\n");
      out.write("\t</form>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"span-6 last\">\n");
      out.write("\t<div style=\"margin-left: 1em;\">\n");
      out.write("\t\t<h6>Commissioned Domain</h6>\n");
      out.write("\t\t<p>Enter connection details of the Sonic Domain to add new services to.\n");
      out.write("\t\t<br><br><b>Note:</b><i>There is a <font color=\"Red\">tension</font> here between development and production.\n");
      out.write("\t\tMost services require incorporation into itineraries to realize their use.\n");
      out.write("\t\tAlthough there may be stand-alone processes or services that are an exception to this,\n");
      out.write("\t\tyou need to go back to Workbench to fully integrate these services. That suggests an\n");
      out.write("\t\targument for Workbench directly supporting service repository features. \n");
      out.write("\t\t<br/><br/>On the flip-side, DXSI service integration currently supports\n");
      out.write("\t\tthe concept this workflow presents: you may import a DXSI service archive(.xar) into\n");
      out.write("\t\tyour development, or stage environment and there-after integrate the DXSI service \n");
      out.write("\t\toperations into an itinerary. What is nice here is that there is a clear\n");
      out.write("\t\tseparation of concerns. Deployment of services, configuration of their instances is an advanced task\n");
      out.write("\t\tthat this work-flow supports. DXSI exchange modeling is an extremely advanced developer task,\n");
      out.write("\t\tso availability of pre-canned DXSI services in a repository represents\n");
      out.write("\t\ta highly value-able asset. For this reason, making a restriction that Workbench be the only means for\n");
      out.write("\t\tintegrating repository services may not be the way to go. That approach makes sense where you want to work on the \n");
      out.write("\t\t<b>service</b> itself. \n");
      out.write("\t\t<br/><br/>The role of selecting and loading of services from a repository does feel different to\n");
      out.write("\t\tthat of an itinerary developer who incorporates the services into his/his applications. The place where\n");
      out.write("\t\tthe  service\n");
      out.write("\t\tis loaded is unlikely to a production domain rather a pre-staging integration environment. This area\n");
      out.write("\t\tneeds further thought.\n");
      out.write("\t\t<br/><br/>There could be another take-way here and it is more about the nature\n");
      out.write("\t\tof services. \n");
      out.write("\t\tPeople integrating Sonic Connect and DXSI currently experience an extremely easy\n");
      out.write("\t\ttask. That is, DXSI and Sonic Connect services present to the itinerary author\n");
      out.write("\t\ta clear set of operations, and typed input, output and fault parameters to map to and from the pipeline.\n");
      out.write("\t\tWe call these services <b>typed integration services</b>.\n");
      out.write("\t\tOther ESB services(<b>pipeline services</b>) are not so transparent as they deal directly with the pipeline through a\n");
      out.write("\t\tinbox, outbox, faultbox paradigm. This is kind of akin to a Unix process pipe model. What the services\n");
      out.write("\t\tdo in terms of consuming and embellishing the pipe-lining message is not obvious. I suspect that\n");
      out.write("\t\ttyped integration services available in a repository to have much higher value. <i>If that is the conclusion,</b> there\n");
      out.write("\t\tis work to do to make generic typed integration service support. Also we would want to port some of the more value-able field services to\n");
      out.write("\t\tuse this model. Whilst that sounds significant, once done the service is in the repository.\n");
      out.write("\t\t<br><br>\n");
      out.write("\t\t<a href=\"http://jira.aurea.local/browse/ESB-7483\" target=\"_blank\">feedback</a>\n");
      out.write("\t\t</i></p>\n");
      out.write("\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
