/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2016-03-30 21:25:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.flows.commission_002dflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class infrastructurePattern_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<div id=\"commissionFlow\">\n");
      out.write("\t<div class=\"span-7\">\n");
      out.write("\t<p class=\"notice\">Select Infrastructure Pattern</p>\n");
      out.write("\t<form id=\"infrastructurePattern\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${flowExecutionUrl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\" method=\"POST\">\n");
      out.write("\t\t<h:outputLabel>Infrastructure Pattern: </h:outputLabel>\n");
      out.write("\t\t<br/>\n");
      out.write("\t\t<input type=\"radio\" name=\"pattern\" value=\"Basic\" checked>Basic<br/>\n");
      out.write(" \t\t<input type=\"radio\" name=\"pattern\" value=\"CAA\">CAA<br/>\n");
      out.write(" \t\t<input type=\"radio\" name=\"pattern\" value=\"HOT-HOT\">HOT-HOT<br/>\n");
      out.write(" \t\t<input type=\"radio\" name=\"pattern\" value=\"Layered\">Layered<br/>\n");
      out.write(" \t\t<input type=\"radio\" name=\"pattern\" value=\"Upload Custom\">Custom<br/>\n");
      out.write("\t\t<button id=\"previous\" type=\"submit\" name=\"_eventId_previous\">Previous &lt;&lt;</button>\n");
      out.write("\t\t<button id=\"next\" type=\"submit\" name=\"_eventId_next\">Next &gt;&gt;</button>\n");
      out.write("\t\t<button id=\"cancel\" type=\"submit\" name=\"_eventId_cancel\">Cancel</button>\n");
      out.write("\t\t<script type=\"text/javascript\">\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'infrastructurePattern',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'previous',event:'onclick',formId:'infrastructurePattern',params:{fragments:\"body\"}}));\n");
      out.write("\t\t\tSpring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'infrastructurePattern',params:{fragments:\"body\"}}));\n");
      out.write("\t\t</script>\n");
      out.write("\t</form>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"span-6 last\">\n");
      out.write("\t<div style=\"margin-left: 1em;\">\n");
      out.write("\t\t<h6>Infrastructure</h6>\n");
      out.write("\t\t<p>Aurea separates infrastructure from service applications. Infrastructure is provided in a number of \n");
      out.write("\t\tbest-practice patterns provided by Aurea, and in customer provided patterns. For more complex\n");
      out.write("\t\tenvironments a <i>layered</i> approach is recommended. <i>Layering</i> allows you deploy your system in a number of\n");
      out.write("\t\tlayers or tiers. Further, within an individual tier systems can be deployed in incremental steps.\n");
      out.write("\t\tAurea identifies the following tier types: Management and User Identity Tier, Core Messaging Tier,\n");
      out.write("\t\tMessaging Segment Tier, Service Archetype Tier, Service Tier, Application Tier, Service \n");
      out.write("\t\tBinder Tier, and Application Binder Tier(ESB Connection, ESB Endpoint, ESB Container and placements).<p>\n");
      out.write("\t\t<br/><b>Notes</b><br/>\n");
      out.write("\t\tWhen I initially looked at Basic versus HOT-HOT versus CAA, my reaction was why even offer Basic\n");
      out.write("\t\tas an option, wouldn't people automatically want CAA or HOT-HOT? I think the answer is this\n");
      out.write("\t\tgets into pricing. If Basic is dirt cheap we can get the customer to buy in easily. I suspect that \n");
      out.write("\t\twhen they see the remaining experience we can provide, he/she is going to be up-sold to CAA or HOT-HOT \n");
      out.write("\t\tvery fast. There's a anecdote: the first time the customer adds services or performs maintenance through\n");
      out.write("\t\tthis portal and learns that <i>had</i> he elected\n");
      out.write("\t\tsomething non-Basic, 24x7 updates were possible, he's going to be up-sold very fast. \n");
      out.write("\t\t<br/><br/>\n");
      out.write("\t\tUpload of custom suggests an enhancement to current Workbench Deployment Modelling(DREM) i.e. don't\n");
      out.write("\t\tconstrain to the 3 OOB patterns. On the flip-side I think DREM tooling belongs\n");
      out.write("\t\telsewhere than Workbench e.g. as in a Web portal such as this.\n");
      out.write("\t\t<br/><br/>\n");
      out.write("\t\tD Kibble: &quot;Connections in general. Would it not be possible to abstract in the first instance\n");
      out.write("\t\t(simple mode vs expert mode) the JMS connection entirely from the ESB containers? \n");
      out.write("\t\tWe know that we associate an ESB container with a message broker cluster and we know what QoS we are \n");
      out.write("\t\twishing to use. Could Sonic not then transparently create the connections and pools targeted to the \n");
      out.write("\t\tassociated broker cluster(s)?&quot;\n");
      out.write("\t</div>\n");
      out.write("\t</div></div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
