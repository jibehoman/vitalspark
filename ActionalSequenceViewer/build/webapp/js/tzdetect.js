

















Ext.namespace("com.actional.util");

/**
 * com.actional.util.TimeZoneDetector - class which detects the current timezone.
 *
 * The json data the TimeZoneDetector operates is of this form
 *
 * The data has timezone offset values as keys.
 * For example, '-120_-180' is a bucket of time zones whose offsets are -2 (in jan) & -3 (in june) hrs depending on DST.
 * Each value is an array of timezone objects.
 * tz Object = {
 * 	id : <timezone id>,
 * 	ts : {Array of transition objects; if any}
 * }
 *
 * ts = [
 * 	{
 * 		't'	: <first dst transition time this year>,
 * 		d	: (<month>+<date>+<hour>+<minute> at t),
 * 		d-	: (<month>+<date>+<hour>+<minute> at (t-1))
 * 	},
 * 	{
 * 		't'	: <second dst transition time this year>,
 * 		d	: (<month>+<date>+<hour>+<minute> at t),
 * 		d-	: (<month>+<date>+<hour>+<minute> at (t-1))
 * 	},
 * ]
 *
 * Example:
 * {
 * '-120_-180':[
 * {'id':'Africa/Cairo','ts':[{'t':1240524000000,'d':'32410','d-':'3232359'},{'t':1253826000000,'d':'824230','d-':'8242359'}]}
 * {'id':'Asia/Amman','ts':[{'t':1238104800000,'d':'22710','d-':'2262359'},{'t':1256853600000,'d':'93000','d-':'930059'}]},
 * {'id':'Asia/Beirut','ts':[{'t':1238277600000,'d':'22910','d-':'2282359'},{'t':1256418000000,'d':'924230','d-':'9242359'}]}
 * ],
 * '-540':[
 * {'id':'Asia/Seoul'},
 * {'id':'Asia/Tokyo'}
 * ],
 * ...
 * }
 *
 * @lastrev fix36137 - move TZ persistence code to storeTz() function
 */
com.actional.util.TimeZoneDetector = {};

(function ()
{
	var detector = com.actional.util.TimeZoneDetector;
	detector.detectAndStore = function()
	{

		var jan10 = new Date();
		jan10.setFullYear(jan10.getFullYear(), 0 , 10);

		var jun10 = new Date(jan10.getFullYear(), 5 , 10);

		var key = getKey(jan10.getTimezoneOffset(), jun10.getTimezoneOffset());


		var data = detector.itsData;

		var tzArray = data[key];

		if (!tzArray)
		{
			
			
			tzArray = data[_getKey(jan10.getTimezoneOffset())];
		}

		if (!tzArray)
		{
			tzArray = data[_getKey(jun10.getTimezoneOffset())];
		}

		if (!tzArray)
		{
			
			
			
			var off = new Date().getTimezoneOffset();

			storeTz('offset_' + String(off));
			return;
		}

		var tzId =  getBestFrom(tzArray);

		storeTz(tzId);
	};

	detector.setData = function(data)
	{
		com.actional.util.TimeZoneDetector.itsData = data;
	};

	/**
	 * If the TZ id is different from the already set one ( if any), update UserSettings_Scopes.GLOBALCOOKIE
	 * Always set the tz.IsSet to true with 0 TTL.
	 * @lastrev fix36137 - new function
	 */
	function storeTz(tzId)
	{
		var currentTz = UserSettings_Read(UserSettings_Scopes.GLOBALCOOKIE, 'user.timeZone');

		if (currentTz != tzId)
		{
			UserSettings_Write(UserSettings_Scopes.GLOBALCOOKIE, 'user.timeZone', tzId);
		}

		
		
		
		CookieAccess.set(
			'tz.IsSet',
			String(true),
			{ 'path' : '/'});
	}

	/**
	 * Given an array of timezone objects, finds out the best matching in this browser.
	 */
	function getBestFrom(tzArray)
	{

		for(var i = 0; i < tzArray.length; i++)
		{
			var tzInfo = tzArray[i];

			if (!tzInfo.ts)
			{
				
				
				return tzInfo.id;
			}

			else
			{
				
				if (transitionsMatch(tzInfo.ts))
				{
					return tzInfo.id;
				}
			}
		}
		return tzArray[0].id;
	}


	/**
	 * Checks if the transitions array matches with the results generated by
	 * javascript date in this browser. The
	 * array is of this format
	 * ts = [
	 * 	{
	 * 		't'	: <first dst transition time this year; in seconds>,
	 * 		d	: (<month>+<date>+<hour>+<minute> at t),
	 * 		d-	: (<month>+<date>+<hour>+<minute> at (t-1))
	 * 	},
	 * 	{
	 * 		't'	: <second dst transition time this year; in seconds>,
	 * 		d	: (<month>+<date>+<hour>+<minute> at t),
	 * 		d-	: (<month>+<date>+<hour>+<minute> at (t-1))
	 * 	},
	 * ]
	 *
	 * @lastrev fix36137 - For the second DST transtion match of the year, time being set correctly.
	 */
	function transitionsMatch(transitions)
	{
		for(i = 0; i < transitions.length; i++)
		{
			var tsn = transitions[i];

			
			var d = new Date(tsn.t * 1000);

			var dateString = '' +  d.getMonth() +  d.getDate() + d.getHours() +  d.getMinutes();

			
			if (dateString != tsn['d'])
				return false;

			d.setTime((tsn.t * 1000) - 1);
			dateString = '' +  d.getMonth() +  d.getDate() + d.getHours() +  d.getMinutes();

			
			if (dateString != tsn['d-'])
				return false;


		}
		return true;
	}

	/**
	 * Returns a time zone bucket key of the form '300_360' or '300'. The numbers are TZ offsets in minutes
	 */
	function getKey(jan10offset, jun10offset)
	{
		var key1 = _getKey(jan10offset);
		var key2 = _getKey(jun10offset);

		if (key1 == key2)
			return key1;
		return key1 + "_" + key2;
	}

	function _getKey(offset)
	{
		return offset + "";

	}

})();

